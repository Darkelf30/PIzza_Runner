/* --------------------
   Case Study Questions
   --------------------*/

-- 1. What is the total amount each customer spent at the restaurant?
-- 2. How many days has each customer visited the restaurant?
-- 3. What was the first item from the menu purchased by each customer?
-- 4. What is the most purchased item on the menu and how many times was it purchased by all customers?
-- 5. Which item was the most popular for each customer?
-- 6. Which item was purchased first by the customer after they became a member?
-- 7. Which item was purchased just before the customer became a member?
-- 8. What is the total items and amount spent for each member before they became a member?
-- 9.  If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
-- 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
*/

-- How many days has each customer visited the restaurant?
SELECT customer_id,
       COUNT(DISTINCT order_date) AS days_count
FROM dannys_diner.sales
GROUP BY 1;

-- What was the first item from the menu purchased by each customer?
WITH cte AS		
        (SELECT *,
       			ROW_NUMBER() OVER(PARTITION BY customer_id ORDER BY order_date) AS row_n
        FROM dannys_diner.sales
        JOIN dannys_diner.menu
        USING(product_id))
SELECT customer_id,
       product_name
FROM   cte
WHERE  row_n = 1;

-- What is the most purchased item on the menu and how many times was it purchased by all customers?
WITH products AS
   (SELECT s.product_id,
          product_name,
          COUNT(*) AS product_count
   FROM dannys_diner.sales AS s
   JOIN dannys_diner.menu AS m
   USING(product_id)
   GROUP BY 1, 2
   ORDER BY 3 DESC
   LIMIT 1)
   
SELECT customer_id,
       COUNT(*) AS ramen_purchase_count
FROM  dannys_diner.sales
WHERE product_id IN (SELECT product_id FROM products)
GROUP BY 1;

-- Which item was the most popular for each customer?
WITH items AS	
    (SELECT customer_id,
           m.product_name,
           COUNT(*) AS product_count
    FROM dannys_diner.sales AS s
    JOIN dannys_diner.menu AS m
    USING(product_id)
    GROUP BY 1, 2
    ORDER BY 1, 3 DESC),

popular_items AS
	(SELECT *,
       RANK() OVER(PARTITION BY customer_id ORDER BY product_count     DESC) AS rank_n
     FROM items)

SELECT customer_id,
       product_name,
       product_count
FROM popular_items
WHERE rank_n = 1;

-- Which item was purchased first by the customer after they became a member?
WITH orders AS    
   (SELECT *,
            RANK() OVER(PARTITION BY customer_id ORDER BY order_date) AS rank_n 
	FROM dannys_diner.menu AS m
	JOIN dannys_diner.sales AS s
	USING(product_id)
	LEFT JOIN dannys_diner.members AS me
	USING(customer_id)
	WHERE s.order_date >= me.join_date)
             
SELECT customer_id,
       product_name
FROM   orders
WHERE  rank_n = 1;

-- Which item was purchased just before the customer became a member?
WITH before_customer_orders AS    
    (SELECT *,
            RANK() OVER(PARTITION BY customer_id ORDER BY order_date DESC) AS rank_n 
	FROM dannys_diner.menu AS m
	JOIN dannys_diner.sales AS s
	USING(product_id)
	LEFT JOIN dannys_diner.members AS me
	USING(customer_id)
	WHERE s.order_date <= me.join_date OR me.join_date IS NULL)

SELECT customer_id,
       product_name
FROM before_customer_orders
WHERE rank_n = 1 AND join_date IS NOT NULL;

-- What is the total items and amount spent for each member before they became a member?
WITH before_customer_orders AS    
    (SELECT *,
            RANK() OVER(PARTITION BY customer_id ORDER BY order_date DESC) AS rank_n 
	FROM dannys_diner.menu AS m
	JOIN dannys_diner.sales AS s
	USING(product_id)
	LEFT JOIN dannys_diner.members AS me
	USING(customer_id)
	WHERE s.order_date < me.join_date OR me.join_date IS NULL)

SELECT customer_id,
       COUNT(*) AS total_items,
       SUM(price) AS total_amount
FROM before_customer_orders
WHERE rank_n = 1 AND join_date IS NOT NULL
GROUP BY 1;

-- If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?
WITH points_accum AS
    (SELECT *,
       	  CASE WHEN product_name IN ('curry', 'ramen') THEN 10 *price
          ELSE 20 * price
          END AS points
    FROM dannys_diner.menu AS m
    JOIN dannys_diner.sales AS s
    USING(product_id)
    LEFT JOIN dannys_diner.members AS me
    USING(customer_id))
    
SELECT customer_id,
       SUM(points) AS total_points
FROM  points_accum
GROUP BY 1
ORDER BY 1;

--In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?
WITH sub_table AS
		(SELECT *,
       	       CASE WHEN order_date < join_date AND product_name IN ('curry', 'ramen') THEN 10 *price
                    WHEN order_date < join_date AND product_name = 'sushi' THEN 20*price
                    WHEN order_date BETWEEN join_date AND (join_date::date + 7) THEN 20 * price
                     WHEN order_date > join_date::date + 7 AND product_name IN ('curry', 'ramen') THEN 10 * price
                     WHEN order_date > join_date::date + 7 AND product_name IN ('curry', 'ramen') THEN 10 * price
          END AS points
             
FROM dannys_diner.menu AS m
JOIN dannys_diner.sales AS s
USING(product_id)
LEFT JOIN dannys_diner.members AS me
USING(customer_id)
ORDER BY customer_id, order_date)
    
SELECT customer_id,
       SUM(points) AS total_points
FROM sub_table
WHERE EXTRACT(MONTH from order_date) = 1 AND  join_date IS NOT NULL
GROUP BY 1;

-- Join all the things
SELECT s.customer_id,
       order_date,
       product_name,
       price,
       CASE WHEN order_date < join_date OR join_date IS NULL THEN 'N'
            WHEN order_date >= join_date THEN 'Y'
            END AS member
FROM dannys_diner.menu AS m
JOIN dannys_diner.sales AS s
USING(product_id)
LEFT JOIN dannys_diner.members AS me
USING(customer_id)
ORDER BY customer_id, order_date, product_name;

-- Rank all things:
WITH cte AS
		(SELECT s.customer_id,
       		   order_date,
               product_name,
               price,
               CASE WHEN order_date < join_date OR join_date IS NULL THEN 'N'
                    WHEN order_date >= join_date THEN 'Y'
                    END AS member
        FROM dannys_diner.menu AS m
        JOIN dannys_diner.sales AS s
        USING(product_id)
        LEFT JOIN dannys_diner.members AS me
        USING(customer_id)
        ORDER BY customer_id, order_date, product_name)

SELECT *,
       CASE WHEN member = 'N' THEN NULL
            ELSE RANK() OVER (PARTITION BY customer_id, member ORDER BY order_date) 
            END AS ranking 
FROM cte;